process {
  
  withName: cellbender_deconvolution {
    //container  = '' //defined in the nf_deconvolution/modules/nf-core/modules/cellbender/functions.nf
    //containerOptions = "--bind /lustre --bind /tmp --containall"
    //maxRetries = 3
    //memory = '18G'
    //cpus = 1
    //time '100m'
    //queue 'normal'
  }
    withName: deconvolution_module {
    //container  = '' //defined in the nf_deconvolution/modules/nf-core/modules/cellbender/functions.nf
    //containerOptions = "--bind /lustre --bind /tmp --containall"
    //maxRetries = 3
    //memory = '18G'
    //cpus = 1
    //time '100m'
    //queue 'normal'
  }
    cache = 'lenient'
    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    containerOptions = "--containall -B /tmp"
    //containerOptions = "--containall --workdir /tmp -B /tmp"

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'  
  // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_tiny {
      cpus = 1
      memory = 1000.MB
      time = 1.h
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:medium_cpus {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
    }

    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
        queue = { task.attempt > 2 ? 'long' : 'normal' }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = 48.h
        queue = 'long'
    }
    withLabel:process_long {
        time   = 48.h
        queue = 'long'
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
    }
    withLabel:process_extralong {
        time   = 78.h
        queue = 'basement'
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:process_medium_memory {
        memory = { check_max( 100.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    withName: SPLIT_BAM_BY_CELL_BARCODES {
      cpus = 4
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      time = 4.h
      //stageOutMode = 'move'
    }
}
